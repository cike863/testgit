package com.xsbweb.util;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.SocketException;
import java.util.ResourceBundle;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.net.ftp.FTPClient;
import org.apache.log4j.Logger;

import com.xsbweb.common.bean.UploadFilePo;
import com.xsbweb.controller.app.AppLoginRegistController;
import com.xsbweb.vo.TrsMedia;

public class UploadUtil {
	private static Logger log = Logger.getLogger(UploadUtil.class);
	public static String FTPupload(InputStream inputStream/*输入流*/,
			String FileName/*文件名*/,
			String type/*文件类型*/) throws Exception {
		//获取资源文件 
		ResourceBundle bundle = ResourceBundle.getBundle("config");  
		String	hostName = bundle.getString("ftp_url_pro");  //IP地址
		String	hostPort = bundle.getString("ftp_port");  //端口
		String	userName = bundle.getString("ftp_login_name"); //登录名 
		String	password = bundle.getString("ftp_login_pass");  //密码
		//日期目录
		String folder = CommonUtils.getNowDateStringOf8();
		//根目录
		String genFolder = "";
		if("image".equals(type)){
			genFolder = "/upfile/newimage/";
		}else if("media".equals(type)){
			genFolder = "/yvd/";
		}else if("authent".equals(type)){
			genFolder = "/upfile/important/";
		}else if("voice".equals(type)){
			genFolder = "/upfile/voice/";
		}else{
			genFolder = "/File/";
		}
		
		FTPClient ftpClient = new FTPClient();
		BufferedInputStream  bis = null;
		try {
			log.info("########开始连接ftp服务器################hostName："+hostName+";hostPort："+hostPort);
			ftpClient.connect(hostName, Integer.parseInt(hostPort));
			ftpClient.setControlEncoding("UTF-8");
			log.info("########ftp开始登录################");
			ftpClient.login(userName, password);
			log.info("########ftpuserName, password"+userName+","+ password+"################");
			ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);
			ftpClient.setControlEncoding("GBK");
			bis = new BufferedInputStream(inputStream);
			//第一参数是保存到FTP跟目录，也可以设置跟目录下的目录，把输入流保存到目录下
			
			if (!ftpClient.changeWorkingDirectory(genFolder+folder)) {// 如果不能进入dir下，说明此目录不存在！
				log.info("########不能进入dir下----目录不存在！，"+!ftpClient.changeWorkingDirectory(genFolder+folder)+"################");
				if (ftpClient.makeDirectory(genFolder+folder)) {  //创建文件夹
					log.info("########文件名，"+genFolder+folder+"/"+FileName+"################");
					ftpClient.storeFile(genFolder+folder+"/"+FileName, bis);
				}else{
					log.info("########创建文件夹"+genFolder+folder+"失败！################");
				}  
			} else{
				log.info("########可以进入dir下################");
				ftpClient.storeFile(genFolder+folder+"/"+FileName, bis);
				log.info("########文件名，"+genFolder+folder+"/"+FileName+"################");
			} 
			return genFolder+folder+"/"+FileName;
		} catch (SocketException e) {
			e.printStackTrace();
			log.info("########SocketException异常################"+e);
			return null;
		} catch (IOException e) {
			e.printStackTrace();
			log.info("########IOException异常################"+e);
			return null;
		}finally{
			//关闭流
			bis.close();
		}
	}
	public static UploadFilePo uploadFilePo(){
		
		UploadFilePo uploadFilePo=new UploadFilePo();
		
		FTPClient ftpClient = new FTPClient();
		//获取资源文件 
		ResourceBundle bundle = ResourceBundle.getBundle("config");  
		String	hostName = bundle.getString("ftp_url_pro");  //IP地址
		String	hostPort = bundle.getString("ftp_port");  //端口
		String	userName = bundle.getString("ftp_login_name"); //登录名 
		String	password = bundle.getString("ftp_login_pass");  //密码
		uploadFilePo.setHostName(hostName);
		uploadFilePo.setHostPort(hostPort);
		uploadFilePo.setPassword(password);
		uploadFilePo.setUserName(userName);
    	try {
	    	ftpClient.connect(hostName, Integer.parseInt(hostPort));
	    	ftpClient.setControlEncoding("UTF-8");
	    	ftpClient.login(userName, password);
			ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);
		} catch (IOException e) {
			e.printStackTrace();
		}
    	uploadFilePo.setFtpClient(ftpClient);
    	
    	return uploadFilePo;
	}
}
